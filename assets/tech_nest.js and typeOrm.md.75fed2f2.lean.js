import{_ as s,z as t,A as n,I as e,B as o,W as p,D as c}from"./plugin-vue_export-helper.71bb0c0b.js";var r="/assets/nestjs.653767cb.png",i="/assets/typeorm.8c99b927.png",l="/assets/dotenv.341b0254.png";const b='{"title":"nest.js and typeOrm","description":"","frontmatter":{"title":"nest.js and typeOrm","tags":["typeOrm","nest.js"]},"headers":[{"level":2,"title":"\u6280\u672F\u6808","slug":"\u6280\u672F\u6808"},{"level":3,"title":"env \u914D\u7F6E","slug":"env-\u914D\u7F6E"},{"level":3,"title":"DB-Transaction \u4E8B\u52A1","slug":"db-transaction-\u4E8B\u52A1"},{"level":3,"title":"favicon.ico","slug":"favicon-ico"},{"level":3,"title":"\u65E5\u5FD7","slug":"\u65E5\u5FD7"}],"relativePath":"tech/nest.js and typeOrm.md","lastUpdated":1701670426297}',u={},k={id:"frontmatter-title",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),y=p('__VP_STATIC_START__<p><div class="table-of-contents"><ul><li><a href="#\u6280\u672F\u6808">\u6280\u672F\u6808</a><ul><li><a href="#env-\u914D\u7F6E">env \u914D\u7F6E</a></li><li><a href="#db-transaction-\u4E8B\u52A1">DB-Transaction \u4E8B\u52A1</a></li><li><a href="#favicon-ico">favicon.ico</a></li><li><a href="#\u65E5\u5FD7">\u65E5\u5FD7</a></li></ul></li></ul></div></p><h2 id="\u6280\u672F\u6808" tabindex="-1">\u6280\u672F\u6808 <a class="header-anchor" href="#\u6280\u672F\u6808" aria-hidden="true">#</a></h2><ul><li><a href="https://docs.nestjs.com/" target="_blank" rel="noopener noreferrer">nest.js</a></li><li><a href="https://github.com/typeorm/typeorm" target="_blank" rel="noopener noreferrer">typeOrm</a></li></ul><p><img src="'+r+'" alt="nest.js"></p><p><img src="'+i+'" alt="typeOrm"></p><h3 id="env-\u914D\u7F6E" tabindex="-1">env \u914D\u7F6E <a class="header-anchor" href="#env-\u914D\u7F6E" aria-hidden="true">#</a></h3><p>\u2022 <a href="https://docs.nestjs.com/techniques/configuration#configuration" target="_blank" rel="noopener noreferrer">https://docs.nestjs.com/techniques/configuration#configuration</a></p><p><img src="'+l+`" alt="dotenv"></p><div class="language-sh"><pre><code><span class="token comment"># \u751F\u6210 .env \u6587\u4EF6</span>
<span class="token function">cp</span> .env.example .env
</code></pre></div><p>\u53C2\u8003\u6700\u4F73\u5B9E\u8DF5\uFF1A</p><blockquote><p>best practice is to store configuration variables in the environment.</p></blockquote><h3 id="db-transaction-\u4E8B\u52A1" tabindex="-1">DB-Transaction \u4E8B\u52A1 <a class="header-anchor" href="#db-transaction-\u4E8B\u52A1" aria-hidden="true">#</a></h3><p>\u2022 <a href="https://typeorm.io/transactions" target="_blank" rel="noopener noreferrer">https://typeorm.io/transactions</a> \u2022 <a href="https://typeorm.io/transactions#creating-and-using-transactions" target="_blank" rel="noopener noreferrer">#creating-and-using-transactions</a> \u5B98\u65B9\u7684\u6587\u6863\u548C example \u5185\u5BB9\u592A\u7B80\u5355\u3002 \u2022 <a href="https://typeorm.io/transactions#using-queryrunner-to-create-and-control-state-of-single-database-connection" target="_blank" rel="noopener noreferrer">#using-queryrunner-to-create-and-control-state-of-single-database-connection</a></p><p><strong>\u63A8\u8350\uFF1AdataSource.transaction</strong></p><p>transaction \u6E90\u7801:</p><div class="language-ts"><pre><code><span class="token comment">/**
 * Wraps given function execution (and all operations made there) in a transaction.
 * All database operations must be executed using provided entity manager.
 */</span>
<span class="token keyword">async</span> <span class="token function">transaction</span><span class="token punctuation">(</span>isolationOrRunInTransaction<span class="token punctuation">,</span> runInTransactionParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> isolation <span class="token operator">=</span> <span class="token keyword">typeof</span> isolationOrRunInTransaction <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span>
        <span class="token operator">?</span> isolationOrRunInTransaction
        <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> runInTransaction <span class="token operator">=</span> <span class="token keyword">typeof</span> isolationOrRunInTransaction <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span>
        <span class="token operator">?</span> isolationOrRunInTransaction
        <span class="token operator">:</span> runInTransactionParam<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>runInTransaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">error_1</span><span class="token punctuation">.</span><span class="token function">TypeORMError</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Transaction method requires callback in second parameter if isolation level is supplied.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queryRunner <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queryRunner<span class="token punctuation">.</span>isReleased<span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunnerProviderAlreadyReleasedError_1</span><span class="token punctuation">.</span><span class="token function">QueryRunnerProviderAlreadyReleasedError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// if query runner is already defined in this class, it means this entity manager was already created for a single connection</span>
    <span class="token comment">// if its not defined we create a new query runner - single connection where we&#39;ll execute all our operations</span>
    <span class="token keyword">const</span> queryRunner <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queryRunner <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">createQueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">startTransaction</span><span class="token punctuation">(</span>isolation<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">runInTransaction</span><span class="token punctuation">(</span>queryRunner<span class="token punctuation">.</span>manager<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// we throw original error even if rollback thrown an error</span>
            <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">rollbackTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span>rollbackError<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>queryRunner<span class="token punctuation">)</span>
            <span class="token comment">// if we used a new query runner provider then release it</span>
            <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u4ECE\u6E90\u7801\u53EF\u4EE5\u53EF\u4EE5\u770B\u51FA <code>transaction</code> \u51FD\u6570\u5185\u90E8\u5DF2\u5C01\u88C5\u4E86 <code>queryRunner</code> \u76F8\u5173\u7684 <code>startTransaction</code>\u3001<code>commitTransaction</code>\u3001<code>rollbackTransaction</code>\u3001<code>release</code> \u7B49\u64CD\u4F5C\u3002</p><p>Everything you want to run in a transaction must be executed in a callback:</p><div class="language-ts"><pre><code><span class="token keyword">await</span> myDataSource<span class="token punctuation">.</span>manager<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>transactionalEntityManager<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> transactionalEntityManager<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>
  <span class="token keyword">await</span> transactionalEntityManager<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>photos<span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>The most important restriction when working in a transaction is to <strong>ALWAYS</strong> use the provided instance of entity manager - transactionalEntityManager in this example. <strong>DO NOT USE GLOBAL ENTITY MANAGER</strong>. <em>All operations MUST be executed using the provided transactional entity manager</em>.</p><p><strong>demo</strong></p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> Logger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DataSource <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;typeorm&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> OnesUsers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@app/modules/slack/entity/ones-users.entity&#39;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">readonly</span> logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span>UserService<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> dataSource<span class="token operator">:</span> DataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">newAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>entityManager<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> onesUser <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span>OnesUsers<span class="token punctuation">)</span>

      <span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> onesUser<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        appUserId<span class="token operator">:</span> <span class="token string">&#39;appUserId&#39;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        onesUserId<span class="token operator">:</span> <span class="token string">&#39;onesUserId&#39;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        accessToken<span class="token operator">:</span> <span class="token string">&#39;accessToken&#39;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        email<span class="token operator">:</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;%o&#39;</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span>

      <span class="token comment">// throw Error(&#39;123&#39;)</span>
      <span class="token keyword">return</span> <span class="token keyword">await</span> onesUser<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="favicon-ico" tabindex="-1">favicon.ico <a class="header-anchor" href="#favicon-ico" aria-hidden="true">#</a></h3><ul><li>\u53C2\u8003\u6587\u6863 <a href="https://docs.nestjs.com/recipes/serve-static" target="_blank" rel="noopener noreferrer">#Serve Static</a></li></ul><h3 id="\u65E5\u5FD7" tabindex="-1">\u65E5\u5FD7 <a class="header-anchor" href="#\u65E5\u5FD7" aria-hidden="true">#</a></h3><p>\u63A8\u8350\u4F7F\u7528</p><ul><li><a href="https://github.com/winstonjs/winston" target="_blank" rel="noopener noreferrer">winston</a> recommended</li><li><a href="https://www.npmjs.com/package/nestjs-pino" target="_blank" rel="noopener noreferrer">nestjs-pino</a></li></ul>__VP_STATIC_END__`,27);function m(a,h,g,f,w,v){return c(),t("div",null,[n("h1",k,[e(o(a.$frontmatter.title)+" ",1),d]),y])}var T=s(u,[["render",m]]);export{b as __pageData,T as default};
