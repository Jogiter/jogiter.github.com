import{_ as a,z as t,A as n,I as p,B as o,W as e,D as c}from"./plugin-vue_export-helper.71bb0c0b.js";const b='{"title":"\u3010\u8F6C\u3011Javascript\u4E2D\u76848\u79CD\u5E38\u89C1\u6570\u636E\u7ED3\u6784","description":"","frontmatter":{"title":"\u3010\u8F6C\u3011Javascript\u4E2D\u76848\u79CD\u5E38\u89C1\u6570\u636E\u7ED3\u6784","tags":["web3"]},"headers":[{"level":2,"title":"1. Stack\uFF08\u6808\uFF09","slug":"_1-stack\uFF08\u6808\uFF09"},{"level":2,"title":"2.Queue\uFF08\u961F\u5217\uFF09","slug":"_2-queue\uFF08\u961F\u5217\uFF09"},{"level":3,"title":"\u4F18\u5148\u961F\u5217","slug":"\u4F18\u5148\u961F\u5217"},{"level":2,"title":"3. Linked List\uFF08\u94FE\u8868\uFF09","slug":"_3-linked-list\uFF08\u94FE\u8868\uFF09"},{"level":2,"title":"4. Set\uFF08\u96C6\u5408\uFF09","slug":"_4-set\uFF08\u96C6\u5408\uFF09"},{"level":2,"title":"5. Hast table\uFF08\u54C8\u5E0C\u8868\uFF09","slug":"_5-hast-table\uFF08\u54C8\u5E0C\u8868\uFF09"},{"level":2,"title":"6. Tree\uFF08\u6811\uFF09","slug":"_6-tree\uFF08\u6811\uFF09"},{"level":2,"title":"7. Trie (\u53D1\u97F3\u4E3A \u201Ctry\u201D)","slug":"_7-trie-\u53D1\u97F3\u4E3A-\u201Ctry\u201D"},{"level":2,"title":"8. Graph\uFF08\u56FE\uFF09","slug":"_8-graph\uFF08\u56FE\uFF09"},{"level":3,"title":"\u90BB\u63A5\u6E05\u5355","slug":"\u90BB\u63A5\u6E05\u5355"},{"level":3,"title":"\u90BB\u63A5\u77E9\u9635","slug":"\u90BB\u63A5\u77E9\u9635"},{"level":2,"title":"\u539F\u6587\u94FE\u63A5","slug":"\u539F\u6587\u94FE\u63A5"}],"relativePath":"tech/\u3010\u8F6C\u3011Javascript\u4E2D\u76848\u79CD\u5E38\u89C1\u6570\u636E\u7ED3\u6784.md","lastUpdated":1701670426297}',u={},l={id:"frontmatter-title",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),i=e(`__VP_STATIC_START__<p><div class="table-of-contents"><ul><li><a href="#_1-stack\uFF08\u6808\uFF09">1. Stack\uFF08\u6808\uFF09</a></li><li><a href="#_2-queue\uFF08\u961F\u5217\uFF09">2.Queue\uFF08\u961F\u5217\uFF09</a><ul><li><a href="#\u4F18\u5148\u961F\u5217">\u4F18\u5148\u961F\u5217</a></li></ul></li><li><a href="#_3-linked-list\uFF08\u94FE\u8868\uFF09">3. Linked List\uFF08\u94FE\u8868\uFF09</a></li><li><a href="#_4-set\uFF08\u96C6\u5408\uFF09">4. Set\uFF08\u96C6\u5408\uFF09</a></li><li><a href="#_5-hast-table\uFF08\u54C8\u5E0C\u8868\uFF09">5. Hast table\uFF08\u54C8\u5E0C\u8868\uFF09</a></li><li><a href="#_6-tree\uFF08\u6811\uFF09">6. Tree\uFF08\u6811\uFF09</a></li><li><a href="#_7-trie-\u53D1\u97F3\u4E3A-\u201Ctry\u201D">7. Trie (\u53D1\u97F3\u4E3A \u201Ctry\u201D)</a></li><li><a href="#_8-graph\uFF08\u56FE\uFF09">8. Graph\uFF08\u56FE\uFF09</a><ul><li><a href="#\u90BB\u63A5\u6E05\u5355">\u90BB\u63A5\u6E05\u5355</a></li><li><a href="#\u90BB\u63A5\u77E9\u9635">\u90BB\u63A5\u77E9\u9635</a></li></ul></li><li><a href="#\u539F\u6587\u94FE\u63A5">\u539F\u6587\u94FE\u63A5</a></li></ul></div></p><h2 id="_1-stack\uFF08\u6808\uFF09" tabindex="-1">1. Stack\uFF08\u6808\uFF09 <a class="header-anchor" href="#_1-stack\uFF08\u6808\uFF09" aria-hidden="true">#</a></h2><p><img src="https://img.cdn.jogiter.cn/public/blog/algorithm/stack.png" alt="stack"></p><p>\u5806\u6808\u9075\u5FAA LIFO\uFF08\u540E\u8FDB\u5148\u51FA\uFF09\u7684\u539F\u5219\u3002\u5982\u679C\u4F60\u628A\u4E66\u5806\u53E0\u8D77\u6765\uFF0C\u4E0A\u9762\u7684\u4E66\u4F1A\u6BD4\u4E0B\u9762\u7684\u4E66\u5148\u62FF\u3002\u6216\u8005\u5F53\u4F60\u5728\u7F51\u4E0A\u6D4F\u89C8\u65F6\uFF0C\u540E\u9000\u6309\u94AE\u4F1A\u5F15\u5BFC\u4F60\u5230\u6700\u8FD1\u6D4F\u89C8\u7684\u9875\u9762\u3002</p><p>Stack \u5177\u6709\u4EE5\u4E0B\u5E38\u89C1\u65B9\u6CD5\uFF1A</p><ul><li><code>push</code>\uFF1A\u8F93\u5165\u4E00\u4E2A\u65B0\u5143\u7D20</li><li><code>pop</code>\uFF1A\u5220\u9664\u9876\u90E8\u5143\u7D20\uFF0C\u8FD4\u56DE\u5220\u9664\u7684\u5143\u7D20</li><li><code>peek</code>\uFF1A\u8FD4\u56DE\u9876\u90E8\u5143\u7D20</li><li><code>length</code>\uFF1A\u8FD4\u56DE\u5806\u6808\u4E2D\u5143\u7D20\u7684\u6570\u91CF</li></ul><p>Javascript \u4E2D\u7684\u6570\u7EC4\u5177\u6709 Stack \u7684\u5C5E\u6027\uFF0C\u4F46\u662F\u6211\u4EEC\u4F7F\u7528 <code>function Stack()</code> \u4ECE\u5934\u5F00\u59CB\u6784\u5EFA Stack</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> value
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      returnundefined
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">--</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">]</span>
    deletethis<span class="token punctuation">.</span>storage<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">]</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">peek</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    returnthis<span class="token punctuation">.</span>storage<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    returnthis<span class="token punctuation">.</span>count
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_2-queue\uFF08\u961F\u5217\uFF09" tabindex="-1">2.Queue\uFF08\u961F\u5217\uFF09 <a class="header-anchor" href="#_2-queue\uFF08\u961F\u5217\uFF09" aria-hidden="true">#</a></h2><p><img src="https://img.cdn.jogiter.cn/public/blog/algorithm/queue.png" alt="queue"></p><p>Queue \u4E0E Stack \u7C7B\u4F3C\u3002\u552F\u4E00\u4E0D\u540C\u7684\u662F\uFF0CQueue \u4F7F\u7528\u7684\u662F FIFO \u539F\u5219\uFF08\u5148\u8FDB\u5148\u51FA\uFF09\u3002\u6362\u53E5\u8BDD\u8BF4\uFF0C\u5F53\u4F60\u6392\u961F\u7B49\u5019\u516C\u4EA4\u8F66\u65F6\uFF0C\u961F\u5217\u4E2D\u7684\u7B2C\u4E00\u4E2A\u603B\u662F\u5148\u4E0A\u8F66\u3002</p><p>\u961F\u5217\u5177\u6709\u4EE5\u4E0B\u65B9\u6CD5\uFF1A</p><ul><li><code>enqueue</code>\uFF1A\u8F93\u5165\u961F\u5217\uFF0C\u5728\u6700\u540E\u6DFB\u52A0\u4E00\u4E2A\u5143\u7D20</li><li><code>dequeue</code>\uFF1A\u79BB\u5F00\u961F\u5217\uFF0C\u5220\u9664\u524D\u5143\u7D20\u5E76\u8FD4\u56DE</li><li><code>front</code>\uFF1A\u5F97\u5230\u7B2C\u4E00\u4E2A\u5143\u7D20</li><li><code>isEmpty</code>\uFF1A\u786E\u5B9A\u961F\u5217\u662F\u5426\u4E3A\u7A7A</li><li><code>size</code>\uFF1A\u83B7\u53D6\u961F\u5217\u4E2D\u5143\u7D20\u7684\u6570\u91CF</li></ul><p>JavaScript \u4E2D\u7684\u6570\u7EC4\u5177\u6709 Queue \u7684\u67D0\u4E9B\u5C5E\u6027\uFF0C\u56E0\u6B64\u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528\u6570\u7EC4\u6765\u6784\u9020 Queue \u7684\u793A\u4F8B\uFF1A</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> collection <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">enqueue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    collection<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">dequeue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> collection<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">front</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> collection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> collection<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> collection<span class="token punctuation">.</span>length
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u4F18\u5148\u961F\u5217" tabindex="-1">\u4F18\u5148\u961F\u5217 <a class="header-anchor" href="#\u4F18\u5148\u961F\u5217" aria-hidden="true">#</a></h3><p>\u961F\u5217\u8FD8\u6709\u53E6\u4E00\u4E2A\u9AD8\u7EA7\u7248\u672C\u3002\u4E3A\u6BCF\u4E2A\u5143\u7D20\u5206\u914D\u4F18\u5148\u7EA7\uFF0C\u5E76\u5C06\u6839\u636E\u4F18\u5148\u7EA7\u5BF9\u5B83\u4EEC\u8FDB\u884C\u6392\u5E8F\uFF1A</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token operator">...</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">enqueue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      collection<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> added <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> collection<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> collection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          collection<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
          added <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>added<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        collection<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u6D4B\u8BD5\u4E00\u4E0B\uFF1A</p><div class="language-ts"><pre><code><span class="token keyword">var</span> pQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
pQ<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token punctuation">[</span>gannicus<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
pQ<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token punctuation">[</span>spartacus<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
pQ<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token punctuation">[</span>crixus<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
pQ<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token punctuation">[</span>oenomaus<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
pQ<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// [</span>
<span class="token comment">//   [  spartacus , 1 ],</span>
<span class="token comment">//   [  crixus , 2 ],</span>
<span class="token comment">//   [  gannicus , 3 ],</span>
<span class="token comment">//   [  oenomaus , 4 ]</span>
<span class="token comment">// ]</span>
</code></pre></div><h2 id="_3-linked-list\uFF08\u94FE\u8868\uFF09" tabindex="-1">3. Linked List\uFF08\u94FE\u8868\uFF09 <a class="header-anchor" href="#_3-linked-list\uFF08\u94FE\u8868\uFF09" aria-hidden="true">#</a></h2><p><img src="https://img.cdn.jogiter.cn/public/blog/algorithm/LinkedList.png" alt="LinkedList"></p><p>\u4ECE\u5B57\u9762\u4E0A\u770B\uFF0C\u94FE\u8868\u662F\u4E00\u4E2A\u94FE\u5F0F\u6570\u636E\u7ED3\u6784\uFF0C\u6BCF\u4E2A\u8282\u70B9\u7531\u4E24\u4E2A\u4FE1\u606F\u7EC4\u6210\uFF1A\u8282\u70B9\u7684\u6570\u636E\u548C\u6307\u5411\u4E0B\u4E00\u4E2A\u8282\u70B9\u7684\u6307\u9488\u3002\u94FE\u8868\u548C\u4F20\u7EDF\u6570\u7EC4\u90FD\u662F\u7EBF\u6027\u6570\u636E\u7ED3\u6784\uFF0C\u5177\u6709\u5E8F\u5217\u5316\u7684\u5B58\u50A8\u65B9\u5F0F\u3002\u5F53\u7136\uFF0C\u5B83\u4EEC\u4E5F\u6709\u5DEE\u5F02\uFF1A</p><table><thead><tr><th style="text-align:left;">\u6BD4\u8F83</th><th style="text-align:left;">Array</th><th style="text-align:left;">Linked List</th></tr></thead><tbody><tr><td style="text-align:left;">\u5185\u5B58\u5206\u914D</td><td style="text-align:left;">\u9759\u6001\u5185\u5B58\u5206\u914D\uFF0C\u53D1\u751F\u5728\u7F16\u8BD1\u548C\u5E8F\u5217\u5316\u8FC7\u7A0B\u4E2D</td><td style="text-align:left;">\u52A8\u6001\u5185\u5B58\u5206\u914D\uFF0C\u53D1\u751F\u5728\u8FD0\u884C\u8FC7\u7A0B\u4E2D\uFF0C\u975E\u8FDE\u7EED\u7684\u3002</td></tr><tr><td style="text-align:left;">\u83B7\u53D6\u5143\u7D20</td><td style="text-align:left;">\u4ECE\u7D22\u5F15\u4E2D\u8BFB\u53D6\uFF0C\u901F\u5EA6\u66F4</td><td style="text-align:left;">\u8BFB\u53D6\u961F\u5217\u4E2D\u7684\u6240\u6709\u8282\u70B9\uFF0C\u76F4\u5230\u5F97\u5230\u7279\u5B9A\u7684\u5143\u7D20\uFF0C\u901F\u5EA6\u8F83\u6162</td></tr><tr><td style="text-align:left;">\u6DFB\u52A0/\u5220\u9664\u5143\u7D20</td><td style="text-align:left;">\u7531\u4E8E\u662F\u987A\u5E8F\u8BB0\u5FC6\u548C\u9759\u6001\u8BB0\u5FC6\uFF0C\u901F\u5EA6\u8F83\u6162</td><td style="text-align:left;">\u7531\u4E8E\u662F\u52A8\u6001\u5206\u914D\uFF0C\u53EA\u9700\u8981\u5C11\u91CF\u7684\u5185\u5B58\u5F00\u9500\uFF0C\u901F\u5EA6\u66F4\u5FEB</td></tr><tr><td style="text-align:left;">\u7A7A\u95F4\u7ED3\u6784</td><td style="text-align:left;">\u4E00\u7EF4\u6216\u591A\u7EF4</td><td style="text-align:left;">\u5355\u8FB9/\u53CC\u8FB9\uFF0C\u6216\u5FAA\u73AF\u94FE\u8868</td></tr></tbody></table><p>\u5355\u8FB9\u94FE\u8868\u901A\u5E38\u5177\u6709\u4EE5\u4E0B\u65B9\u6CD5\uFF1A</p><ul><li><code>size</code>\uFF1A\u8FD4\u56DE\u8282\u70B9\u6570</li><li><code>head</code>\uFF1A\u8FD4\u56DE\u5934\u90E8\u7684\u5143\u7D20</li><li><code>add</code>\uFF1A\u5728\u5C3E\u90E8\u6DFB\u52A0\u53E6\u4E00\u4E2A\u8282\u70B9</li><li><code>remove</code>\uFF1A\u5220\u9664\u67D0\u4E9B\u8282\u70B9</li><li><code>indexOf</code>\uFF1A\u8FD4\u56DE\u8282\u70B9\u7684\u7D22\u5F15</li><li><code>elementAt</code>\uFF1A\u8FD4\u56DE\u7D22\u5F15\u7684\u8282\u70B9</li><li><code>addAt</code>\uFF1A\u5728\u7279\u5B9A\u7D22\u5F15\u5904\u63D2\u5165\u8282\u70B9</li><li><code>removeAt</code>\uFF1A\u5220\u9664\u7279\u5B9A\u7D22\u5F15\u5904\u7684\u8282\u70B9</li></ul><div class="language-ts"><pre><code><span class="token comment">/** \u94FE\u8868\u4E2D\u7684\u8282\u70B9 **/</span>
<span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8282\u70B9\u4E2D\u7684\u6570\u636E</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element
  <span class="token comment">// \u6307\u5411\u4E0B\u4E00\u4E2A\u8282\u70B9\u7684\u6307\u9488</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">var</span> head <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> length
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">head</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> head
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      head <span class="token operator">=</span> node
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> currentNode <span class="token operator">=</span> head
      <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
      <span class="token punctuation">}</span>
      currentNode<span class="token punctuation">.</span>next <span class="token operator">=</span> node
    <span class="token punctuation">}</span>
    length<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> currentNode <span class="token operator">=</span> head
    <span class="token keyword">var</span> previousNode
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>element <span class="token operator">===</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      head <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>element <span class="token operator">!==</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        previousNode <span class="token operator">=</span> currentNode
        currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
      <span class="token punctuation">}</span>
      previousNode<span class="token punctuation">.</span>next <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    length<span class="token operator">--</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> length <span class="token operator">===</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">indexOf</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> currentNode <span class="token operator">=</span> head
    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      index<span class="token operator">++</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>element <span class="token operator">===</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> index
      <span class="token punctuation">}</span>
      currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">elementAt</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> currentNode <span class="token operator">=</span> head
    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      count<span class="token operator">++</span>
      currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> currentNode<span class="token punctuation">.</span>element
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">addAt</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
    <span class="token keyword">var</span> currentNode <span class="token operator">=</span> head
    <span class="token keyword">var</span> previousNode
    <span class="token keyword">var</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      returnfalse
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>next <span class="token operator">=</span> currentNode
      head <span class="token operator">=</span> node
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>currentIndex <span class="token operator">&lt;</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        currentIndex<span class="token operator">++</span>
        previousNode <span class="token operator">=</span> currentNode
        currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
      <span class="token punctuation">}</span>
      node<span class="token punctuation">.</span>next <span class="token operator">=</span> currentNode
      previousNode<span class="token punctuation">.</span>next <span class="token operator">=</span> node
    <span class="token punctuation">}</span>
    length<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">removeAt</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> currentNode <span class="token operator">=</span> head
    <span class="token keyword">var</span> previousNode
    <span class="token keyword">var</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      returnnull
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      head <span class="token operator">=</span> currentIndex<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>currentIndex <span class="token operator">&lt;</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        currentIndex<span class="token operator">++</span>
        previousNode <span class="token operator">=</span> currentNode
        currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
      <span class="token punctuation">}</span>
      previousNode<span class="token punctuation">.</span>next <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next
    <span class="token punctuation">}</span>
    length<span class="token operator">--</span>
    <span class="token keyword">return</span> currentNode<span class="token punctuation">.</span>element
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_4-set\uFF08\u96C6\u5408\uFF09" tabindex="-1">4. Set\uFF08\u96C6\u5408\uFF09 <a class="header-anchor" href="#_4-set\uFF08\u96C6\u5408\uFF09" aria-hidden="true">#</a></h2><p><img src="https://img.cdn.jogiter.cn/public/blog/algorithm/Set.png" alt="set"></p><p>\u96C6\u5408\u662F\u6570\u5B66\u7684\u57FA\u672C\u6982\u5FF5\uFF1A\u5B9A\u4E49\u660E\u786E\u4E14\u4E0D\u540C\u7684\u5BF9\u8C61\u7684\u96C6\u5408\u3002ES6 \u5F15\u5165\u4E86\u96C6\u5408\u7684\u6982\u5FF5\uFF0C\u5B83\u4E0E\u6570\u7EC4\u6709\u4E00\u5B9A\u7A0B\u5EA6\u7684\u76F8\u4F3C\u6027\u3002\u4F46\u662F\uFF0C\u96C6\u5408\u4E0D\u5141\u8BB8\u91CD\u590D\u5143\u7D20\uFF0C\u4E5F\u4E0D\u4F1A\u88AB\u7D22\u5F15\u3002</p><p>\u4E00\u4E2A\u5178\u578B\u7684\u96C6\u5408\u5177\u6709\u4EE5\u4E0B\u65B9\u6CD5\uFF1A</p><ul><li><code>values</code>\uFF1A\u8FD4\u56DE\u96C6\u5408\u4E2D\u7684\u6240\u6709\u5143\u7D20</li><li><code>size</code>\uFF1A\u8FD4\u56DE\u5143\u7D20\u4E2A\u6570</li><li><code>has</code>\uFF1A\u786E\u5B9A\u5143\u7D20\u662F\u5426\u5B58\u5728</li><li><code>add</code>\uFF1A\u5C06\u5143\u7D20\u63D2\u5165\u96C6\u5408</li><li><code>remove</code>\uFF1A\u4ECE\u96C6\u5408\u4E2D\u5220\u9664\u5143\u7D20</li><li><code>union</code>\uFF1A\u8FD4\u56DE\u4E24\u7EC4\u4EA4\u96C6</li><li><code>difference</code>\uFF1A\u8FD4\u56DE\u4E24\u7EC4\u7684\u5DEE</li><li><code>subset</code>\uFF1A\u786E\u5B9A\u67D0\u4E2A\u96C6\u5408\u662F\u5426\u662F\u53E6\u4E00\u4E2A\u96C6\u5408\u7684\u5B50\u96C6</li></ul><p>\u4E3A\u4E86\u533A\u5206 ES6 \u4E2D\u7684 <code>set</code>\uFF0C\u6211\u4EEC\u5728\u4EE5\u4E0B\u793A\u4F8B\u4E2D\u58F0\u660E\u4E3A MySet\uFF1A</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">MySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> collection <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">has</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> collection<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">values</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> collection
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> collection<span class="token punctuation">.</span>length
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      collection<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
      returntrue
    <span class="token punctuation">}</span>
    returnfalse
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      index <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
      collection<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
      returntrue
    <span class="token punctuation">}</span>
    returnfalse
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">union</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> unionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> firstSet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> secondSet <span class="token operator">=</span> otherSet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    firstSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      unionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    secondSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      unionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> unionSet
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">intersection</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> intersectionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> firstSet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    firstSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        intersectionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> intersectionSet
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">difference</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> differenceSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> firstSet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    firstSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        differenceSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> differenceSet
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">subset</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> firstSet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> firstSet<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_5-hast-table\uFF08\u54C8\u5E0C\u8868\uFF09" tabindex="-1">5. Hast table\uFF08\u54C8\u5E0C\u8868\uFF09 <a class="header-anchor" href="#_5-hast-table\uFF08\u54C8\u5E0C\u8868\uFF09" aria-hidden="true">#</a></h2><p><img src="https://img.cdn.jogiter.cn/public/blog/algorithm/Hasttable.png" alt="Hast table"></p><p>\u54C8\u5E0C\u8868\u662F\u4E00\u79CD\u952E\u503C\u6570\u636E\u7ED3\u6784\u3002\u7531\u4E8E\u901A\u8FC7\u952E\u503C\u67E5\u8BE2\u7684\u901F\u5EA6\u5FEB\u5982\u95EA\u7535\uFF0C\u6240\u4EE5\u5E38\u7528\u4E8E <code>Map</code>\u3001<code>Dictionary</code> \u6216 <code>Object</code> \u6570\u636E\u7ED3\u6784\u4E2D\u3002\u5982\u4E0A\u56FE\u6240\u793A\uFF0C\u54C8\u5E0C\u8868\u4F7F\u7528\u54C8\u5E0C\u51FD\u6570(<code>hash function</code>)\u5C06\u952E\u8F6C\u6362\u4E3A\u6570\u5B57\u5217\u8868\uFF0C\u8FD9\u4E9B\u6570\u5B57\u4F5C\u4E3A\u5BF9\u5E94\u952E\u7684\u503C\u3002\u8981\u5FEB\u901F\u4F7F\u7528\u952E\u83B7\u53D6\u4EF7\u503C\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u53EF\u4EE5\u8FBE\u5230 O(1)\u3002\u76F8\u540C\u7684\u952E\u5FC5\u987B\u8FD4\u56DE\u76F8\u540C\u7684\u503C\u2014\u2014\u8FD9\u662F\u54C8\u5E0C\u51FD\u6570\u7684\u57FA\u7840\u3002</p><p>\u54C8\u5E0C\u8868\u5177\u6709\u4EE5\u4E0B\u65B9\u6CD5\uFF1A</p><ul><li><code>add</code>\uFF1A\u6DFB\u52A0\u952E\u503C\u5BF9</li><li><code>remove</code>\uFF1A\u5220\u9664\u952E\u503C\u5BF9</li><li><code>lookup</code>\uFF1A\u4F7F\u7528\u952E\u67E5\u627E\u5BF9\u5E94\u7684\u503C</li></ul><p>\u4E00\u4E2A Javascript \u4E2D\u7B80\u5316\u7684\u54C8\u5E0C\u8868\u7684\u4F8B\u5B50\uFF1A</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token builtin">string</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    hash <span class="token operator">+=</span> <span class="token builtin">string</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> hash <span class="token operator">%</span> max
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">HashTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> storage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> storageLimit <span class="token operator">=</span> <span class="token number">4</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> storageLimit<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> inserted <span class="token operator">=</span> <span class="token boolean">false</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value
          inserted <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> storageLimit<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">delete</span> storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">delete</span> storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">lookup</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> storageLimit<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      returnundefined
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_6-tree\uFF08\u6811\uFF09" tabindex="-1">6. Tree\uFF08\u6811\uFF09 <a class="header-anchor" href="#_6-tree\uFF08\u6811\uFF09" aria-hidden="true">#</a></h2><p><img src="https://img.cdn.jogiter.cn/public/blog/algorithm/tree.png" alt="Tree"></p><p><code>Tree</code> (\u6811)\u6570\u636E\u7ED3\u6784\u662F\u591A\u5C42\u7ED3\u6784\u3002\u4E0E <code>Array</code>\uFF0C<code>Stack</code> \u548C <code>Queue</code> \u76F8\u6BD4\uFF0C\u5B83\u4E5F\u662F\u4E00\u79CD\u975E\u7EBF\u6027\u6570\u636E\u7ED3\u6784\u3002\u8FD9\u79CD\u7ED3\u6784\u5728\u63D2\u5165\u548C\u641C\u7D22\u64CD\u4F5C\u65F6\u6548\u7387\u5F88\u9AD8\u3002\u6211\u4EEC\u6765\u770B\u770B\u6811\u578B\u6570\u636E\u7ED3\u6784\u7684\u4E00\u4E9B\u6982\u5FF5\u3002</p><ul><li><code>root</code>\uFF1A\u6811\u7684\u6839\u8282\u70B9\uFF0C\u65E0\u7236\u8282\u70B9</li><li><code>parent node</code>\uFF1A\u4E0A\u5C42\u7684\u76F4\u63A5\u8282\u70B9\uFF0C\u53EA\u6709\u4E00\u4E2A</li><li><code>child node</code>\uFF1A\u4E0B\u5C42\u7684\u76F4\u63A5\u8282\u70B9\u53EF\u4EE5\u6709\u591A\u4E2A</li><li><code>siblings</code>\uFF1A\u5171\u4EAB\u540C\u4E00\u4E2A\u7236\u8282\u70B9</li><li><code>leaf</code>\uFF1A\u6CA1\u6709\u5B69\u5B50\u7684\u8282\u70B9</li><li><code>Edge</code>\uFF1A\u8282\u70B9\u4E4B\u95F4\u7684\u5206\u652F\u6216\u94FE\u63A5</li><li><code>path</code>\uFF1A\u4ECE\u8D77\u59CB\u8282\u70B9\u5230\u76EE\u6807\u8282\u70B9\u7684\u8FB9</li><li><code>Height of Nod</code>\uFF1A\u7279\u5B9A\u8282\u70B9\u5230\u53F6\u8282\u70B9\u7684\u6700\u957F\u8DEF\u5F84\u7684\u8FB9\u6570</li><li><code>Height of Tree</code>\uFF1A\u6839\u8282\u70B9\u5230\u53F6\u8282\u70B9\u7684\u6700\u957F\u8DEF\u5F84\u7684\u8FB9\u6570</li><li><code>Depth of Node</code>\uFF1A\u4ECE\u6839\u8282\u70B9\u5230\u7279\u5B9A\u8282\u70B9\u7684\u8FB9\u6570</li><li><code>Degree of Node</code>\uFF1A\u5B50\u8282\u70B9\u6570</li></ul><p>\u8FD9\u91CC\u4EE5\u4E8C\u53C9\u6811\u4E3A\u4F8B\u3002\u6BCF\u4E2A\u8282\u70B9\u6700\u591A\u6709\u4E24\u4E2A\u8282\u70B9\uFF0C\u5DE6\u8FB9\u8282\u70B9\u6BD4\u5F53\u524D\u8282\u70B9\u5C0F\uFF0C\u53F3\u8FB9\u8282\u70B9\u6BD4\u5F53\u524D\u8282\u70B9\u5927\u3002</p><p><img src="https://img.cdn.jogiter.cn/public/blog/algorithm/tree-1.png" alt="Tree"></p><p>\u4E8C\u53C9\u6811\u4E2D\u7684\u5E38\u7528\u65B9\u6CD5\uFF1A</p><ul><li><code>add</code>\uFF1A\u5C06\u8282\u70B9\u63D2\u5165\u6811</li><li><code>findMin</code>\uFF1A\u83B7\u53D6\u6700\u5C0F\u8282\u70B9</li><li><code>findMax</code>\uFF1A\u83B7\u53D6\u6700\u5927\u8282\u70B9</li><li><code>find</code>\uFF1A\u641C\u7D22\u7279\u5B9A\u8282\u70B9</li><li><code>isPresent</code>\uFF1A\u786E\u5B9A\u67D0\u4E2A\u8282\u70B9\u7684\u5B58\u5728</li><li><code>remove</code>\uFF1A\u4ECE\u6811\u4E2D\u5220\u9664\u8282\u70B9</li></ul><p>JavaScript \u4E2D\u7684\u793A\u4F8B\uFF1A</p><div class="language-ts"><pre><code><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">BST</span></span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token function-variable function">searchTree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token function">elseif</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">searchTree</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token function">elseif</span> <span class="token punctuation">(</span>data <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token function">elseif</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">searchTree</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          returnnull<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">searchTree</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> current<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>right <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      current <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> current<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">find</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>data <span class="token operator">!==</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;</span> current<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        current <span class="token operator">=</span> current<span class="token punctuation">.</span>left
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        current <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        returnnull<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> current<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">isPresent</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> current<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        returntrue<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;</span> current<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        current <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    returnfalse<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">remove</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">removeNode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        returnnull<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> node<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// no child node</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          returnnull<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// no left node</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// no right node</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// has 2 child nodes</span>
        <span class="token keyword">var</span> tempNode <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>tempNode<span class="token punctuation">.</span>left <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          tempNode <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        node<span class="token punctuation">.</span>data <span class="token operator">=</span> tempNode<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> tempNode<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token function">elseif</span> <span class="token punctuation">(</span>data <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u6D4B\u8BD5\u4E00\u4E0B\uFF1A</p><div class="language-ts"><pre><code><span class="token keyword">const</span> bst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">BST</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bst<span class="token punctuation">.</span><span class="token function">findMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bst<span class="token punctuation">.</span><span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
bst<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bst<span class="token punctuation">.</span><span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bst<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token number">1</span>
<span class="token number">7</span>
<span class="token number">6</span>
<span class="token boolean">false</span>
</code></pre></div><h2 id="_7-trie-\u53D1\u97F3\u4E3A-\u201Ctry\u201D" tabindex="-1">7. Trie (\u53D1\u97F3\u4E3A \u201Ctry\u201D) <a class="header-anchor" href="#_7-trie-\u53D1\u97F3\u4E3A-\u201Ctry\u201D" aria-hidden="true">#</a></h2><p><img src="https://img.cdn.jogiter.cn/public/blog/algorithm/Trie.png" alt="Trie"></p><p><code>Trie</code> \u6216\u201C\u524D\u7F00\u6811\u201D\u4E5F\u662F\u641C\u7D22\u6811\u7684\u4E00\u79CD\u3002<code>Trie</code> \u5206\u6B65\u5B58\u50A8\u6570\u636E\u2014\u2014\u6811\u4E2D\u7684\u6BCF\u4E2A\u8282\u70B9\u4EE3\u8868\u4E00\u4E2A\u6B65\u9AA4\u3002<code>Trie</code> \u662F\u7528\u6765\u5B58\u50A8\u8BCD\u6C47\u7684\uFF0C\u6240\u4EE5\u5B83\u53EF\u4EE5\u5FEB\u901F\u641C\u7D22\uFF0C\u7279\u522B\u662F\u81EA\u52A8\u5B8C\u6210\u529F\u80FD\u3002</p><p><code>Trie</code> \u4E2D\u7684\u6BCF\u4E2A\u8282\u70B9\u90FD\u6709\u4E00\u4E2A\u5B57\u6BCD\u2014\u2014\u5206\u652F\u4E4B\u540E\u53EF\u4EE5\u7EC4\u6210\u4E00\u4E2A\u5B8C\u6574\u7684\u5355\u8BCD\u3002\u5B83\u8FD8\u5305\u62EC\u4E00\u4E2A\u5E03\u5C14\u6307\u793A\u7B26\uFF0C\u4EE5\u663E\u793A\u8FD9\u662F\u5426\u662F\u6700\u540E\u4E00\u4E2A\u5B57\u6BCD\u3002</p><p>Trie \u5177\u6709\u4EE5\u4E0B\u65B9\u6CD5\uFF1A</p><ul><li><code>add</code>\uFF1A\u5728\u5B57\u5178\u6811\u4E2D\u63D2\u5165\u4E00\u4E2A\u5355\u8BCD</li><li><code>isWord</code>\uFF1A\u786E\u5B9A\u6811\u662F\u5426\u7531\u67D0\u4E9B\u5355\u8BCD\u7EC4\u6210</li><li><code>print</code>\uFF1A\u8FD4\u56DE\u6811\u4E2D\u7684\u6240\u6709\u5355\u8BCD</li></ul><div class="language-ts"><pre><code><span class="token comment">/** Node in Trie **/</span>
<span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token function">newMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">isEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    returnthis<span class="token punctuation">.</span>end<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>input<span class="token punctuation">,</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span><span class="token function">setEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token function">elseif</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      returnthis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      returnthis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">isWord</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        returnfalse<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        node <span class="token operator">=</span> node<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        word <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token function-variable function">search</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>keys<span class="token punctuation">.</span>size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> letter <span class="token keyword">of</span> node<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">search</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">isEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          words<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token builtin">string</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> words<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> <span class="token function">newString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> words<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> words <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_8-graph\uFF08\u56FE\uFF09" tabindex="-1">8. Graph\uFF08\u56FE\uFF09 <a class="header-anchor" href="#_8-graph\uFF08\u56FE\uFF09" aria-hidden="true">#</a></h2><p><img src="https://img.cdn.jogiter.cn/public/blog/algorithm/Graph.png" alt="Graph\uFF08\u56FE\uFF09"></p><p><code>Graph</code>\uFF08\u6709\u65F6\u79F0\u4E3A\u7F51\u7EDC\uFF09\u662F\u6307\u5177\u6709\u94FE\u63A5\uFF08\u6216\u8FB9\uFF09\u7684\u8282\u70B9\u96C6\u3002\u6839\u636E\u8054\u7CFB\u662F\u5426\u6709\u65B9\u5411\u6027\uFF0C\u53EF\u4EE5\u8FDB\u4E00\u6B65\u5206\u4E3A\u4E24\u7EC4\uFF08\u5373\u5B9A\u5411\u56FE\u548C\u4E0D\u5B9A\u5411\u56FE\uFF09\u3002<code>Graph</code> \u5728\u6211\u4EEC\u7684\u751F\u6D3B\u4E2D\u88AB\u5E7F\u6CDB\u4F7F\u7528\u2014\u2014<strong>\u5728\u5BFC\u822A\u5E94\u7528\u4E2D\u8BA1\u7B97\u6700\u4F73\u8DEF\u7EBF\uFF0C\u6216\u8005\u5728\u793E\u4EA4\u5A92\u4F53\u4E2D\u63A8\u8350\u670B\u53CB</strong>\uFF0C\u4E3E\u4E24\u4E2A\u4F8B\u5B50\u3002</p><p>\u56FE\u6709\u4E24\u79CD\u8868\u793A\u5F62\u5F0F\uFF1A</p><h3 id="\u90BB\u63A5\u6E05\u5355" tabindex="-1">\u90BB\u63A5\u6E05\u5355 <a class="header-anchor" href="#\u90BB\u63A5\u6E05\u5355" aria-hidden="true">#</a></h3><p>\u5728\u6B64\u65B9\u6CD5\u4E2D\uFF0C\u6211\u4EEC\u5728\u5DE6\u4FA7\u5217\u51FA\u6240\u6709\u53EF\u80FD\u7684\u8282\u70B9\uFF0C\u5E76\u5728\u53F3\u4FA7\u663E\u793A\u5DF2\u8FDE\u63A5\u7684\u8282\u70B9\u3002</p><p><img src="https://img.cdn.jogiter.cn/public/blog/algorithm/Graph-1.png" alt="Graph-1"></p><h3 id="\u90BB\u63A5\u77E9\u9635" tabindex="-1">\u90BB\u63A5\u77E9\u9635 <a class="header-anchor" href="#\u90BB\u63A5\u77E9\u9635" aria-hidden="true">#</a></h3><p>\u76F8\u90BB\u77E9\u9635\u4EE5\u884C\u548C\u5217\u7684\u5F62\u5F0F\u663E\u793A\u8282\u70B9\uFF0C\u884C\u548C\u5217\u7684\u4EA4\u70B9\u8BE0\u91CA\u4E86\u8282\u70B9\u4E4B\u95F4\u7684\u5173\u7CFB\uFF0C0 \u8868\u793A\u6CA1\u6709\u8054\u7CFB\uFF0C1 \u8868\u793A\u6709\u8054\u7CFB\uFF0C&gt;1 \u8868\u793A\u6743\u91CD\u4E0D\u540C\u3002</p><p><img src="https://img.cdn.jogiter.cn/public/blog/algorithm/Graph-2.png" alt="Graph-2"></p><p>\u8981\u67E5\u8BE2\u56FE\u4E2D\u7684\u8282\u70B9\uFF0C\u5FC5\u987B\u7528 \u201C\u5BBD\u5EA6\u4F18\u5148\u641C\u7D22&quot;\uFF08BFS\uFF09\u65B9\u6CD5\u6216 \u201C\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22\u201D\uFF08DFS\uFF09\u65B9\u6CD5\u5728\u6574\u4E2A\u6811\u7F51\u4E2D\u8FDB\u884C\u641C\u7D22\u3002</p><p>\u8BA9\u6211\u4EEC\u770B\u4E00\u4E2A\u4F8B\u5B50\u7684 BFS \u5728 Javascript\uFF1A</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> nodesLen <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nodesLen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">Infinity</span>
  <span class="token punctuation">}</span>
  nodesLen<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">var</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>
  <span class="token keyword">var</span> current
  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    current <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">var</span> curConnected <span class="token operator">=</span> graph<span class="token punctuation">[</span>current<span class="token punctuation">]</span>
    <span class="token keyword">var</span> neighborIdx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">var</span> idx <span class="token operator">=</span> curConnected<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>idx <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      neighborIdx<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>
      idx <span class="token operator">=</span> curConnected<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> neighborIdx<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>nodesLen<span class="token punctuation">[</span>neighborIdx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nodesLen<span class="token punctuation">[</span>neighborIdx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nodesLen<span class="token punctuation">[</span>current<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>neighborIdx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> nodesLen
<span class="token punctuation">}</span>
</code></pre></div><p>\u6D4B\u8BD5\u4E00\u4E0B\uFF1A</p><div class="language-ts"><pre><code><span class="token keyword">var</span> graph <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// \u7ED3\u679C</span>
<span class="token punctuation">{</span>
  <span class="token number">0</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token number">1</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token number">2</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token number">3</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token number">4</span><span class="token operator">:</span> <span class="token number">Infinity</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5C31\u662F\u8FD9\u6837\u2014\u2014\u6211\u4EEC\u5DF2\u7ECF\u4ECB\u7ECD\u4E86\u6240\u6709\u5E38\u89C1\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u5E76\u7ED9\u51FA\u4E86 JavaScript \u4E2D\u7684\u4F8B\u5B50\u3002\u8FD9\u5E94\u8BE5\u80FD\u8BA9\u4F60\u66F4\u597D\u5730\u4E86\u89E3\u6570\u636E\u7ED3\u6784\u5728\u8BA1\u7B97\u673A\u4E2D\u7684\u5DE5\u4F5C\u539F\u7406\u3002\u795D\u4F60\u7F16\u7801\u6109\u5FEB\uFF01</p><h2 id="\u539F\u6587\u94FE\u63A5" tabindex="-1">\u539F\u6587\u94FE\u63A5 <a class="header-anchor" href="#\u539F\u6587\u94FE\u63A5" aria-hidden="true">#</a></h2><ul><li><a href="https://medium.com/better-programming/8-common-data-structures-in-javascript-3d3537e69a27" target="_blank" rel="noopener noreferrer">8-common-data-structures-in-javascript</a></li><li><a href="https://blog.csdn.net/weixin_48726650/article/details/107789164" target="_blank" rel="noopener noreferrer">\u8BD1\uFF1AJavascript \u4E2D\u7684 8 \u79CD\u5E38\u89C1\u6570\u636E\u7ED3\u6784</a></li></ul>__VP_STATIC_END__`,78);function r(s,d,f,y,w,h){return c(),t("div",null,[n("h1",l,[p(o(s.$frontmatter.title)+" ",1),k]),i])}var g=a(u,[["render",r]]);export{b as __pageData,g as default};
